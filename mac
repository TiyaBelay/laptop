#!/bin/sh

# Welcome to the Omada Health (forked from Thoughtbot) laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

###################### USEFUL FUNCTIONS ###################################################################

fancy_echo() {
  # shellcheck disable=SC2039
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_bash_profile() {
  # shellcheck disable=SC2039
  local text="$1" bash_profile
  # shellcheck disable=SC2039
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.bash_profile.local" ]; then
    bash_profile="$HOME/.bash_profile.local"
  else
    bash_profile="$HOME/.bash_profile"
  fi

  if ! grep -Fqs "$text" "$bash_profile"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$bash_profile"
    else
      printf "\n%s\n" "$text" >> "$bash_profile"
    fi
  fi
}

app_is_installed() {
  # shellcheck disable=SC2039
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

conditional_exit() {
  fancy_echo "$1"
  # shellcheck disable=SC2039
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) fancy_echo "Wonderful! Moving on..."; break;;
      No ) fancy_echo "Bummer, you must complete that before continuing with this script.\n$2\nGoodbye";exit;;
    esac
  done
}

conditional_installation() {
  fancy_echo "$1"
  # shellcheck disable=SC2039
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) $2; break;;
      No ) fancy_echo "Great, moving on..."; break;;
    esac
  done
}

brew_cask_install() {
  if app_is_installed "$1" || brew_cask_is_installed "$1"; then
    fancy_echo "$1 is already installed. Skipping..."
  else
    fancy_echo "Installing $1..."
    brew cask install "$@"
  fi
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

brew_cask_is_installed() {
  brew cask list -1 | grep -Fqx "$1"
}

brew_is_upgradable() {
  ! brew outdated --quiet "$1" >/dev/null
}

brew_tap_is_installed() {
  brew tap | grep -Fqx "$1"
}

brew_tap() {
  if ! brew_tap_is_installed "$1"; then
    fancy_echo "Tapping $1..."
    brew tap "$1" 2> /dev/null
  fi
}

################################ Check for installation requirements ############################
  fancy_echo "Welcome to Omada Health!\nWe have a few questions to ask before we get started."
  conditional_exit "Have you set up your ssh keys with helpdesk and platform?", "Please read the engineering onboarding wiki for more instructions:\nhttps://wiki.omadahealth.net/doku.php?id=engineering:onboarding"
  conditional_exit "Do you have access to Omada's Github?", "Please read the engineering onboarding wiki or speak to your manager for more instructions:\nhttps://wiki.omadahealth.net/doku.php?id=engineering:onboarding"

################################ Create some folders ############################################

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.bash_profile" ]; then
  touch "$HOME/.bash_profile"
fi

###################### Create Omada Specific Folders ###########################################

if [ ! -d "$HOME/workspace" ]; then
  mkdir "$HOME/workspace"
fi

if [ ! -d "$HOME/workspace/dotfiles" ]; then
  git clone git@github.com:omadahealth/dotfiles.git "$HOME/workspace"
  append_to_bash_profile "source '$HOME/workspace/dotfiles/dotfiles.sh'"
fi

###################### Install Homebrew & Packages #############################################

# shellcheck disable=SC2016
append_to_bash_profile 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_bash_profile '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_bash_profile 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update

brew_tap "homebrew/services"
brew_tap "homebrew/versions"

brew_tap 'caskroom/cask'
brew_tap 'caskroom/versions'

# Unix
brew_install_or_upgrade 'git'
brew_install_or_upgrade "openssl"
brew_install_or_upgrade "coreutils" #provides the GNU version of the stat command

# Text editors
brew_install_or_upgrade "vim"

# Programming languages
brew_install_or_upgrade "node"
brew_install_or_upgrade "python"

# Image manipulation
brew_install_or_upgrade "imagemagick"

# Databases
brew_install_or_upgrade "postgresql"
fancy_echo "If postgresql was installed, you will need to run 'brew services start postgresql' to start it."
brew_install_or_upgrade "redis"
fancy_echo "If redis was installed, you will need to run 'brew services start redis' to start it."

# Elasticsearch
brew_cask_install "java"
brew_install_or_upgrade "elasticsearch"
fancy_echo "If elasticsearch was installed, you will need to run 'brew services start elasticsearch' to start it."

fancy_echo "Configuring Ruby ..."
# If rbenv is present, use it.  If not use rvm

if ! command -v rbenv >/dev/null; then
  if ! command -v rvm >/dev/null; then
    fancy_echo 'Installing RVM and the latest Ruby...'
    curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
    # shellcheck source=/dev/null
    . "$HOME/.rvm/scripts/rvm"
  else
    local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
    latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
    if [ "$local_version" != "$latest_version" ]; then
      fancy_echo 'Upgrading RVM...'
      rvm get stable --auto-dotfiles --autolibs=enable
    else
      fancy_echo "Already using the latest version of RVM. Skipping..."
    fi
  fi
fi

fancy_echo 'Updating Rubygems...'
gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

append_to_bash_profile "export PATH='/usr/local/opt/coreutils/libexec/gnubin:$PATH'"
append_to_bash_profile "export MANPATH='/usr/local/opt/coreutils/libexec/gnuman:$MANPATH'"

fancy_echo 'Appending bash_profile to load RVM into a shell session as a function.'
fancy_echo 'If you add any lines to your bash_profile, make sure they go above the RVM line'
append_to_bash_profile '# Add all other lines above this.  RVM must be last.'
append_to_bash_profile "[[ -s '$HOME/.rvm/scripts/rvm' ]] && source '$HOME/.rvm/scripts/rvm'" # Load RVM into a shell session *as a function*'

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

fancy_echo "You're done!\nWelcome again to Omada Health.\n♪ヽ( ⌒o⌒)人(⌒-⌒ )v ♪"
